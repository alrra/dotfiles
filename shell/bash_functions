#!/bin/bash

# ------------------------------------------------------------------------------
# | File System                                                                |
# ------------------------------------------------------------------------------

# Create a data URI from a file
datauri() {

    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:$mimeType;base64,$(openssl base64 -in "$1" | tr -d "\n")"
    else
        print_error "'$1' is not a file."
    fi

}

# Delete all files that match a certain pattern from the current directory
deletefiles() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# Get gzip information (gzipped file size + reduction size)
gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1")
            #                  └─ very slow for large files, but `stat -c%s`
            #                     or `du -b` don't work on Mac OS X :(
            printf "\n original size:   %12s\n" "$(hrfs $originalSize)"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs $gzippedSize)"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $(($originalSize-$gzippedSize)) )" \
                        "$( printf "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e 's/0*$//;s/\.$//' )"
                            #              └─ remove tailing zeros

        else
            print_error "'$1' is empty."
        fi
    else
        print_error "'$1' is not a file."
    fi

}

# Create new directories and enter the first one
mkd() {
    if [ -n "$*" ]; then
        mkdir -p "$@" && cd "$@"
        #      └─ make parent directories if needed
    fi
}

# ------------------------------------------------------------------------------
# | Miscellaneous                                                              |
# ------------------------------------------------------------------------------

# Simple Calculator
? () {

    local result=""

    #                       ┌─ default (when --mathlib is used) is 20
    result="$( printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n' )"
    #                         remove the tailing "\" and "\n" ─┘
    #                         (large numbers are printed on multiple lines)

    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
            -e 's/0*$//;s/\.$//'   # remove tailing zeros
    else
        printf "$result"
    fi

    printf "\n"

}

# ------------------------------------------------------------------------------
# | Search                                                                     |
# ------------------------------------------------------------------------------

# Search History
qh() {
    #                                 ┌─ enable colors for pipe
    #                                 │  ("--color=auto" enables colors only if
    #                                 │  the output is in the terminal)
    cat ~/.bash_history | grep --color=always "$*" | less -RX
    # display the ANSI color escape sequences in raw form ─┘│
    #           don't clear the screen after quitting less ─┘
}

# Search for text within the current directory
qt() {
    grep -ir --color=always "$*" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

# ------------------------------------------------------------------------------
# | Text Processing                                                            |
# ------------------------------------------------------------------------------

# Human redable file size
# (because `du -h` doesn't cut it for me)
hrfs() {
    printf "$1" |
    awk '{
            i = 1;
            split("B KB MB GB TB PB EB ZB YB WTFB", v);
            value = $1;

            # confirm that the input is a number
            if ( value + .0 == value ) {

                while ( value >= 1024 ) {
                    value/=1024;
                    i++;
                }

                if ( value == int(value) ) {
                    printf "%d %s", value, v[i]
                } else {
                    printf "%.1f %s", value, v[i]
                }

            }
        }' |
    sed -e ':l; s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l'
    #                          └─ add commas to the numbers
    #                             (changes "1023.2 KB" to "1,023.2 KB")
}

print_error() {
    printf "\e[1;31m[error] $1\e[0m\n"
}
