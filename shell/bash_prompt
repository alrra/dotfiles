#!/bin/bash

# ######################################################################
# # LS COLORS                                                          #
# ######################################################################

set_ls_colors() {

    # There are several different implementations of color for ls:

    # ------------------------------------------------------------------
    # | FreeBSD / Mac OS X                                             |
    # ------------------------------------------------------------------

    #  - `ls` displays colors if the `-G` option is passed or if
    #    the `CLICOLOR` environment variable is set
    #
    #  - the actual colors are configured through the `LSCOLORS`
    #    environment variable (built-in defaults are used if this
    #    variable is not set)

    if [ "$os" == "osx" ]; then

        # Enable color support
        alias ls="ls -G" # or CLICOLOR=1

        LSCOLORS=""

        LSCOLORS+="gx" # directory
        LSCOLORS+="fx" # symbolic link
        LSCOLORS+="cx" # socket
        LSCOLORS+="dx" # pipe
        LSCOLORS+="cx" # executable
        LSCOLORS+="eg" # block special
        LSCOLORS+="ed" # character special
        LSCOLORS+="ab" # executable with setuid bit set
        LSCOLORS+="ag" # executable with setgid bit set
        LSCOLORS+="cc" # directory writable to others, with sticky bit
        LSCOLORS+="bd" # directory writable to others, without sticky bit

        export LSCOLORS

    # ------------------------------------------------------------------
    # | GNU                                                            |
    # ------------------------------------------------------------------

    #  - `ls` displays colors if the `--color` option is passed
    #
    #  - the actual colors are configured through the `LS_COLORS`
    #    environment variable (built-in defaults are used if this
    #    variable is not set)

    elif [ "$os" == "linux" ] && [ "$distro" == "ubuntu" ]; then

        # Enable color support
        if [ -x /usr/bin/dircolors ]; then

            test -r ~/.dircolors \
                && eval "$(dircolors -b ~/.dircolors)" \
                || eval "$(dircolors -b)"

            alias dir='dir --color=auto'
            alias egrep='egrep --color=auto'
            alias fgrep='fgrep --color=auto'
            alias grep='grep --color=auto'
            alias ls='ls --color=auto'
            alias vdir='vdir --color=auto'

        fi

        LS_COLORS=""

        LS_COLORS+="no=0;35:"   # global default
        LS_COLORS+="di=1;35:"   # directory
        LS_COLORS+="ex=0;32:"   # executable file
        LS_COLORS+="fi=0;35:"   # file
        LS_COLORS+="ec=:"       # non-filename text
        LS_COLORS+="mi=1;31:"   # non-existent file pointed to by a symlink
        LS_COLORS+="ln=target:" # symbolic link
        LS_COLORS+="or=31;01"   # symbolic link pointing to a non-existent file

        export LS_COLORS

    fi
}

# ######################################################################
# # PROMPTS                                                            #
# ######################################################################

# Note: Don't break this function into smaller, more specialized ones
# as you will only pollute the global space even more (the functions
# cannot be unset due to the fact that they are called every time the
# prompt string is shown)

prompt_git() {

    local s="" branchName=""

    # Check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # Check if the current directory is in `.git/`
        # (some of the following checks don't make
        #  sense / won't work in the `.git` directory)
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # Check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # Check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # Check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # Check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        branchName="$( printf "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
                                    || git rev-parse --short HEAD 2> /dev/null \
                                    || printf ' (unknown)' )" | \
                       tr -d '\n' )"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"

    else
        return
    fi

}

set_prompts() {

    local black="" blue="" bold="" cyan="" green="" orange="" \
          purple="" red="" reset="" white="" yellow=""

    local dateCmd=""

    if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then

        tput sgr0 # Reset colors

        bold=$(tput bold)
        reset=$(tput sgr0)

        # Solarized colors
        # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
        black=$(tput setaf 0)
        blue=$(tput setaf 33)
        cyan=$(tput setaf 37)
        green=$(tput setaf 64)
        orange=$(tput setaf 166)
        purple=$(tput setaf 125)
        red=$(tput setaf 124)
        white=$(tput setaf 15)
        yellow=$(tput setaf 136)

    else

        bold=""
        reset="\e[0m"

        black="\e[1;30m"
        blue="\e[1;34m"
        cyan="\e[1;36m"
        green="\e[1;32m"
        orange="\e[1;33m"
        purple="\e[1;35m"
        red="\e[1;31m"
        white="\e[1;37m"
        yellow="\e[1;33m"

    fi

    # ------------------------------------------------------------------
    # | Prompt string                                                  |
    # ------------------------------------------------------------------

    PS1="\[\033]0;\w\007\]"                   # terminal title (set
                                              # to the current working
                                              # directory)
    PS1+="\[$bold\]"
    PS1+="\[$orange\]\u"                      # username
    PS1+="\[$white\]@"
    PS1+="\[$yellow\]\h"                      # host
    PS1+="\[$white\]: "
    PS1+="\[$green\]\w"                       # working directory
    PS1+="\$(prompt_git \"$white on $cyan\")" # git repository details
    PS1+="\n"
    PS1+="\[$reset$white\]\$ \[$reset\]"

    export PS1

    # ------------------------------------------------------------------
    # | Subshell prompt string                                         |
    # ------------------------------------------------------------------

    PS2="⚡ "

    export PS2

    # ------------------------------------------------------------------
    # | Debug prompt string                                            |
    # ------------------------------------------------------------------

    # e.g:
    #
    # The GNU `date` command has the `%N` interpreted sequence while
    # other implementations don't (on OS X `gdate` can be used instead
    # of the native `date` if the `coreutils` package was installed)
    #
    # if [ "$(date +%N)" != "N" ] || \
    #    [ ! -x "$(command -v 'gdate')" ]; then
    #    dateCmd="date +%s.%N"
    # else
    #    dateCmd="gdate +%s.%N"
    # fi
    #
    # PS4="+$( tput cr && tput cuf 6 &&
    #          printf "$yellow %s $green%6s $reset" "$($dateCmd)" "[$LINENO]" )"
    #
    # PS4 output:
    #
    #   ++    1357074705.875970000  [123] '[' 1 == 0 ']'
    #   └──┬─┘└────┬───┘ └───┬───┘ └──┬─┘ └──────┬─────┘
    #      │       │         │        │          │
    #      │       │         │        │          └─ command
    #      │       │         │        └─ line number
    #      │       │         └─ nanoseconds
    #      │       └─ seconds since 1970-01-01 00:00:00 UTC
    #      └─ depth-level of the subshell

    PS4="+$( tput cr && tput cuf 6 && printf "%s $reset" )"

    export PS4

}

# ######################################################################

set_ls_colors
unset set_ls_colors

set_prompts
unset set_prompts
