[alias]

    a = add
    am   = commit --amend
    ap = add -p                             # Patch
    br  = branch
    c   = commit
    cv = commit --verbose
    cav = commit -a --verbose
    ca  = !git add -A && git commit         # Commit all changes.
    co  = checkout
    cp  = cherry-pick
    d   = diff
    dc  = diff --cached
    g   = log --graph --pretty=custom       # Show custom graph.
    l   = log --pretty=custom               # Show custom log.
    lc  = shortlog --summary --numbered     # List contributors.
    p   = push
    r   = rebase
    rlc = reset --hard HEAD~1               # Remove last commit.
    s   = status
    ulc = reset --soft HEAD~1               # Undo last commit.
    w   = instaweb --httpd=webrick          # Start web-based visualizer.

    st = status -sb
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    cl = clone
    diff = diff --word-diff

    # list branches sorted by last modified
    b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"

    ###### http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/ ######

    # List commits in short form, with colors and branch/tag annotations.
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

    # List commits showing changed files
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

    # List with no colors if you need to chain the out put with Unix pipes
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    # List oneline commits showing dates
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

    # List oneline commits showing relative dates
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

    # default look for short git log
    le = log --oneline --decorate

    # See all the commits related to a file, with the diff of the changes
    filelog = log -u                        # or fl = log -u

    # Show modified files in last commit
    dl = "!git ll -1"

    # Show a diff last commit
    dlc = diff --cached HEAD^

    ## Finding files and content inside files (grep)

    ### Find a file path in codebase:
    f = "!git ls-files | grep -i"           # Usage: git f <search term>

    ### Search/grep your entire codebase for a string
    grep = grep -Ii                         # or gr = grep -Ii / Usage: git grep <search term>

    ### Grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    ## Rename [branch] to done-[branch]
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    ## Show the last tag
    lasttag = describe --tags --abbrev=0

    ## List remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    ## Initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    ## Undo from here http://megakemp.com/2016/08/25/git-undo/
    undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"

    ###### https://haacked.com/archive/2014/07/28/github-flow-aliases/ ######
    
    cob = checkout -b
    ec = config --global -e                 # Edit gitconfig
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    save = !git add -A && git commit -m 'SAVEPOINT'                                     # Adds all changes including untracked files and creates a commit.
    wip = commit -am "WIP"                                                              # Commits only tracked changes.
    undom = reset HEAD~1 --mixed                                                         # Resets the previous commit, but keeps all the changes from that commit in the working directory.
    amend = commit -a --amend                                                           # Modify the previous commit.
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard    # Commits everything in the working directory and then does a hard reset to remove that commit.

    # Clean everything up on my local machine.
    # This alias does the following:
    # 1. Switches to master (though you can specify a different default branch)
    # 2. Runs git up to bring master up to speed with the origin
    # 3. Deletes all branches already merged into master using another alias, git bclean
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code.

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message.

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit.

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches.

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch.

    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"
	unstage = reset --
	pom = push origin master


[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

    frag = magenta
    meta = yellow
    new = green
    old = red

[color "status"]

    added = green reverse
    changed = yellow reverse
    untracked = red reverse

[core]

    abbrev = 12
    attributesfile = ~/.gitattributes
    autocrlf = input
    excludesfile = ~/.gitignore
    editor = code -w

[diff]
    tool = vscode

[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[diff "bin"]

    # Use `hexdump` to diff binary files.

    textconv = hexdump -v -C

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)


[push]

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.

    followTags = true

[user]

    # Don't guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

    useConfigOnly = true

[include]

    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    #
    # [!] The following needs to remain at the end of this file in
    #     order to allow any of the above configs to be overwritten
    #     by the local ones

    path = ~/.gitconfig.local

[commit]

    # Template for the commit message
    #
    # Sources:
    # - https://chris.beams.io/posts/git-commit/
    # - http://365git.tumblr.com/post/3308646748/writing-git-commit-messages
    # - http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

    template = ~/.gitmessage.txt

[help]

    # help.autocorrect is actually an integer which represents tenths of a second.
    # So if you set it to 50, Git will give you 5 seconds to change your mind_ 
    # before executing the autocorrected command.

	autocorrect = 1
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
