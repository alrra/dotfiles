[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "desc": "Process the rules and execute any actions corresponding to the specified transition.",
        "doc": "Process the rules and execute any actions corresponding to the specified transition.\n\nThis method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`",
        "name": "processTransition",
        "parameters": [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ],
        "signature": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "stripped_doc": "This method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.",
        "type": "Method"
      },
      {
        "def": "WiFiTransitions:start()",
        "desc": "Start the WiFi watcher",
        "doc": "Start the WiFi watcher\n\nReturns:\n * The WiFiTransitions spoon object",
        "name": "start",
        "returns": [
          " * The WiFiTransitions spoon object"
        ],
        "signature": "WiFiTransitions:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WiFiTransitions.actions",
        "desc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
        "doc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:\n * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "name": "actions",
        "signature": "WiFiTransitions.actions",
        "stripped_doc": " * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "WiFiTransitions.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Allow arbitrary actions when transitioning between SSIDs",
    "doc": "Allow arbitrary actions when transitioning between SSIDs\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip)",
    "items": [
      {
        "def": "WiFiTransitions.actions",
        "desc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
        "doc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:\n * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "name": "actions",
        "signature": "WiFiTransitions.actions",
        "stripped_doc": " * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "WiFiTransitions.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "desc": "Process the rules and execute any actions corresponding to the specified transition.",
        "doc": "Process the rules and execute any actions corresponding to the specified transition.\n\nThis method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`",
        "name": "processTransition",
        "parameters": [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ],
        "signature": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "stripped_doc": "This method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.",
        "type": "Method"
      },
      {
        "def": "WiFiTransitions:start()",
        "desc": "Start the WiFi watcher",
        "doc": "Start the WiFi watcher\n\nReturns:\n * The WiFiTransitions spoon object",
        "name": "start",
        "returns": [
          " * The WiFiTransitions spoon object"
        ],
        "signature": "WiFiTransitions:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WiFiTransitions",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip)",
    "submodules": [],
    "type": "Module"
  }
]