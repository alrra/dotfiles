#!/bin/bash

# DESCRIPTION:
#
#   Generate compression efficiency heatmap images for files / URLs.
#
# USAGE:
#
#   get-compression-heatmap URL/FILE ...
#
# USEFUL LINKS:
#
#   http://encode.ru/threads/1725-pngthermal-pseudo-thermal-view-of-create_heatmap_for_png-compression-efficiency
#   http://encode.ru/threads/1889-gzthermal-pseudo-thermal-view-of-Gzip-Deflate-compression-efficiency

# ----------------------------------------------------------------------

declare gzthermal=""
declare pngthermal=""

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cmd_exists() {
    command -v "$1" &> /dev/null
}

compress_file() {
    cat "$1" | tee >(gzip > "$2") &> /dev/null
}

create_heatmap_for_file() {

    local tmpFile="$1"

    if [ "$(get_file_mime_type "$1")" != "application/x-gzip" ]; then
        tmpFile="$(create_tmp_file)"
        compress_file "$1" "$tmpFile"
    fi \
        && "${gzthermal}" "$tmpFile" \
        && mv "gzthermal-result.png" "$2"
        #       └─ this cannot be changed :(

}

create_heatmap_for_png() {
    "${pngthermal}" "$1" "$2"
}

create_heatmap_for_webpage() {

    declare -r -a CURL_DEFAULT_OPTIONS=(
        --connect-timeout 30
        --header "Accept-Encoding: gzip, deflate"
        --header "Cache-Control: no-cache" # Prevent intermediate
                                           # proxies from caching
                                           # the response.

        --location                         # If the page was moved
                                           # to a different location,
                                           # redo the request.
        --max-time 150
        --show-error
        --silent
        --user-agent "Mozilla/5.0 Gecko"   # Send a fake UA string
                                           # for sites that sniff
                                           # it instead of using the
                                           # Accept-Encoding header.
    )

    local tmpFile="$(create_tmp_file)"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Try to get the compressed version of the page, and if the
    # page isn't served compressed, `create_heatmap_for_file` will
    # take care of compressing it.

    curl "${CURL_DEFAULT_OPTIONS[@]}" "$1" &> /dev/null 1> "$tmpFile" \
        && create_heatmap_for_file "$tmpFile" "$2"

}

create_tmp_file() {
    printf "%s" "$(mktemp /tmp/XXXXX)"
}

get_file_mime_type() {
    printf "%s" "$(file "$1" --brief --mime-type)"
}

get_image_name() {
    printf "%s.png" "$(printf "%s" "$1" | sed 's/[^a-zA-Z0-9]/-/g')"
}

get_script_path() {

    declare -r os_name="$(uname -s)"
    local path="$1"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    if [ "$os_name" == "Darwin" ]; then
        path="$path/macos"
    elif [ "$os_name" == "Linux" ]; then
        path="$path/linux"

        if [ "$(uname -m)" == "x86_64" ]; then
            path="${path}-64"
        else
            path="${path}-31"
        fi
    fi

    printf "%s" "$(dirname "${BASH_SOURCE[0]}")/$path"

}

open_image() {

    # The order of the following checks matters as
    # on Ubuntu there is also a utility called `open`.

    if cmd_exists "xdg-open"; then
        xdg-open "$1"
    elif cmd_exists "open"; then
        open "$1"
    fi

}

print_error() {
    printf " [✖] %s\n" "$1"
}

print_result() {

    if [ "$1" -eq 0 ]; then
        print_success "$2"
    else
        print_error "$2"
    fi

    return "$1"

}

print_success() {
    printf " [✔] %s\n" "$1"
}

# ----------------------------------------------------------------------

main() {

    # Check if `cURL` is installed

    if ! cmd_exists "curl"; then
        printf "cURL is required, please install it!\n"
        exit 1
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    local imageFile=""

    gzthermal="$(get_script_path "gzthermal")"
    pngthermal="$(get_script_path "pngthermal")"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    while [ $# -ne 0 ]; do

        imageFile="$(get_image_name "$1")"

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Check if the current command
        # line argument is a local file.

        if [ -f "$1" ]; then

            if [ "$(get_file_mime_type "$1")" != "image/png" ]; then
                create_heatmap_for_file "$1" "$imageFile"
            else
                create_heatmap_for_png "$1" "$imageFile"
            fi

        # If it's not, assume it is a URL.

        else
            create_heatmap_for_webpage "$1" "$imageFile"
        fi

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        print_result $? "$1" \
            && open_image "$imageFile"

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Opening too many images really
        # quickly makes macOS' Preview crash.

        sleep 0.2

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        shift

    done

}

main "$@"
