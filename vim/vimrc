" ##############################################################################
" # GENERAL SETTINGS                                                           #
" ##############################################################################

" Use the Pathogen plugin to install plugins and
" runtime files in their own private directories
runtime plugins/pathogen/autoload/pathogen.vim
call pathogen#infect("plugins")
call pathogen#helptags()

syntax on                         " Enable syntax highlighting

if has("autocmd")
    filetype plugin indent on
    "           │     │    └─────── Enable file type detection
    "           │     └──────────── Enable loading of indent file
    "           └────────────────── Enable loading of plugin files
endif

set t_Co=256                      " Enable full-color support
colorscheme xoria256              " Use custom color scheme
set autoindent                    " Copy indent to the new line
set background=dark               " Use colors that look good on a dark bg

set backspace=indent              " ┐
set backspace+=eol                " │ Allow `backspace` in insert mode
set backspace+=start              " ┘

set backupdir=~/.vim/backups      " Set directory for backup files

set clipboard=unnamed             " ┐
                                  " │ Use the system clipboard
if has("unnamedplus")             " │ as the default register
    set clipboard+=unnamedplus    " │
endif                             " ┘

set cpoptions+=$                  " When making a change, don't redisplay the
                                  " line, and instead, put a `$` sign at the
                                  " end of the changed text

set colorcolumn=81                " Highlight certain columns
set cursorline                    " Highlight the current line
set directory=~/.vim/swaps        " Set directory for swap files
set encoding=utf-8 nobomb         " Use UTF-8 without BOM
set history=5000                  " Increase command line history
set hlsearch                      " Enable search highlighting
set ignorecase                    " Ignore case in search patterns
set incsearch                     " Highlight search pattern as it's being typed
set laststatus=2                  " Always show the status line

set listchars=tab:▸\              " ┐
set listchars+=trail:·            " │ Use custom symbols to
set listchars+=eol:↴              " │ represent invisible characters
set listchars+=nbsp:_             " ┘

set magic                         " Enable extended regexp
set mousehide                     " Hide mouse pointer while typing
set nocompatible                  " Don't make vim, vi-compatibile
set noerrorbells                  " Disable error bells

set nojoinspaces                  " When using the join command, only insert a
                                  " single space after a `.`, `?` or `!`

set nostartofline                 " Kept the cursor on the same column
set number                        " Show line number

set numberwidth=5                 " Increase the minimal number of columns used
                                  " for the `line number`

set report=0                      " Report the number of lines changed
set ruler                         " Show cursor position

set scrolloff=5                   " When scrolling, keep the cursor 5 lines
                                  " below the top and 5 lines above the bottom
                                  " of the screen

set shortmess=aAItW               " Avoid all the hit-enter prompts
set showcmd                       " Show the (partial) command being typed
set showmode                      " Show current mode
set spelllang=en_us               " Use `en_us` as the spellchecking language

set smartcase                     " Override `ignorecase` option if the search
                                  " pattern contains uppercase characters

set synmaxcol=2500                " Limit syntax highlighting (this avoids the
                                  " very slow redrawing when files contain long
                                  " lines)

set tabstop=4                     " ┐
set softtabstop=4                 " │ Set global <TAB> settings
set shiftwidth=4                  " │ http://vimcasts.org/e/2
set expandtab                     " ┘

set ttyfast                       " Enable fast terminal connection
set undodir=~/.vim/undos          " Set directory for undo files
set undofile                      " Automatically save undo history
set virtualedit=all               " Allow cursor to be positioned anywhere

set visualbell                    " ┐
set noerrorbells                  " │ Disable beeping and window flashing
set t_vb=                         " ┘ http://vim.wikia.com/wiki/Disable_beeping

set wildmenu                      " Enable enhanced command-line completion (by
                                  " hitting <TAB> in command mode, vim will show
                                  " the possible matches just above the command
                                  " line with the first match highlighted)

set winminheight=0                " Allow windows to be squashed to 0 lines

" ------------------------------------------------------------------------------
" | Automatic Commands                                                         |
" ------------------------------------------------------------------------------

if has("autocmd")

    " Automatically switch to absolute line numbers when vim loses focus
    autocmd FocusLost * :set number
    " Automatically switch to relative line numbers when vim gains focus
    autocmd FocusGained * :set relativenumber
    " Automatically switch to absolute line numbers when vim is in insert mode
    autocmd InsertEnter * :set number
    " Automatically switch to relative line numbers when vim is in normal mode
    autocmd InsertLeave * :set relativenumber

    " Custom syntax for different languages
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab

    " Treat `.json` files as JavaScript
    autocmd BufNewFile, BufRead *.json setfiletype json syntax=javascript

    " Strip trailing whitespace automatically when the file is saved
    autocmd BufWritePre * :call StripWhitespaces()

endif

" ------------------------------------------------------------------------------
" | Highlighting                                                               |
" ------------------------------------------------------------------------------

" Terminal types:
"
"   1) term  (normal terminals, e.g.: vt100, xterm)
"   2) cterm (color terminals, e.g.: MS-DOS console, color-xterm)
"   3) gui   (GUIs)

highlight ColorColumn                              ctermbg=239
highlight LineNr      cterm=NONE  ctermfg=DarkGrey ctermbg=NONE
highlight User1       cterm=bold  ctermfg=Grey     ctermbg=237

set statusline=%1*\ [%n]\ [%f]%m%r%h%w%y[%{&ff}:%{strlen(&fenc)?&fenc:'none'}]%=%(\ %c,%l/%L\ %)%P
"               │     │     │  │ │ │ │ │    │                │                 │     │ │   │    └─ percent through file
"               │     │     │  │ │ │ │ │    │                │                 │     │ │   └─ total number of lines
"               │     │     │  │ │ │ │ │    │                │                 │     │ └─ current line number
"               │     │     │  │ │ │ │ │    │                │                 │     └─ current column number
"               │     │     │  │ │ │ │ │    │                │                 └─ left/right separator
"               │     │     │  │ │ │ │ │    │                └─ file encoding
"               │     │     │  │ │ │ │ │    └─ file format
"               │     │     │  │ │ │ │ └─ file type
"               │     │     │  │ │ │ └─ preview window flag
"               │     │     │  │ │ └─ help file flag
"               │     │     │  │ └─ readonly flag
"               │     │     │  └─ modified flag
"               │     │     └─ path to the file
"               │     └─ buffer number
"               └─ User1 highlight

" ------------------------------------------------------------------------------
" | Key Mappings                                                               |
" ------------------------------------------------------------------------------

" Use a different mapleader (default is "\")
let mapleader = ","

" Redefine trigger key for Emmet
" http://docs.emmet.io/cheat-sheet/
let g:user_emmet_leader_key='<C-E>'

" [,* ] Search and replace the word under the cursor
nnoremap <leader>* :%s/\<<C-r><C-w>\>//<Left>

" [,cc] Toggle code comments
" https://github.com/tomtom/tcomment_vim
noremap <leader>cc :TComment<CR>

" [,cr] Calculate result
" http://vimcasts.org/e/56
nnoremap <leader>cr 0yt=A<C-r>=<C-r>"<CR><Esc>

" [,cs] Clear search
map <leader>cs <Esc>:noh<CR>

" [,h ] JSHint the code
" https://github.com/Shutnik/jshint2.vim
nnoremap <leader>h :JSHint<CR>

" [,l ] Toggle `set list`
nmap <leader>l :set list!<CR>

" [,n ] Toggle `set relativenumber`
" http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/
function! ToggleRelativeLineNumbers()

    if ( &relativenumber == 1 )
        set number
    else
        set relativenumber
    endif

endfunction

nnoremap <leader>n :call ToggleRelativeLineNumbers()<CR>

" [,sl] Toggle show limits
function! ToggleLimits()

    " [51,73]
    "   - git commit message
    "     http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
    " [81]
    "   - general use

    if ( &colorcolumn == "81" )
        set colorcolumn+=51,73
    else
        set colorcolumn-=51,73
    endif

endfunction

nnoremap <leader>sl :call ToggleLimits()<CR>

" [,ss] Strip whitespace
function! StripWhitespaces()

    " save last search and cursor position
    let searchHistory = @/
    let cursorLine = line(".")
    let cursorColumn = col(".")

    " strip trailing whitespaces
    %s/\s\+$//e

    " merge consecutive empty lines
    "g/^\s*$/,/\S/-j

    " restore previous search history and cursor position
    let @/ = searchHistory
    call cursor(cursorLine, cursorColumn)

endfunction

nnoremap <leader>ss :call StripWhitespaces()<CR>

" [,v ] Make the opening of the `.vimrc` file easier
nmap <leader>v :vsp $MYVIMRC<CR>

" [,W ] Sudo write
noremap <leader>W :w !sudo tee %<CR>


" ##############################################################################
" # PLUGIN RELATED SETTINGS                                                    #
" ##############################################################################

" ------------------------------------------------------------------------------
" | Emmet                                                                      |
" ------------------------------------------------------------------------------

" Custom Emmet snippets
" http://docs.emmet.io/customization/snippets/
let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.vim/snippets/emmet.json')), "\n"))


" ##############################################################################
" # LOCAL SETTINGS                                                             #
" ##############################################################################

" Load local settings if they exist
if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif
