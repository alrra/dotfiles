#!/bin/bash

declare -r GITHUB_REPOSITORY="alrra/dotfiles"

declare -r DOTFILES_ORIGIN="git@github.com:$GITHUB_REPOSITORY.git"
declare -r DOTFILES_TARBALL_URL="http://github.com/$GITHUB_REPOSITORY/tarball/master"
declare -r DOTFILES_UTILS_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/master/os/utils.sh"

declare dotfilesDirectory="$HOME/projects/dotfiles"

# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------

check_os() {

    declare -r OS_NAME="$(uname -s)"

    # Check if the OS is OS X and it is above a certain version
    if [ "$OS_NAME" == "Darwin" ]; then
        if [ $(compare_versions "$(sw_vers -productVersion)" "10.10") == "<" ]; then
            printf "Sorry, this script is intended only for OS X 10.10.0+."
            return 1
        else
            return 0
        fi

    # Check if the OS is Ubuntu
    else
        if [ "$OS_NAME" != "Linux" ] || [ ! -e "/etc/lsb-release" ]; then
            printf "Sorry, this script is intended only for OS X and Ubuntu!"
            return 1
        else
            return 0
        fi
    fi

}

compare_versions() {

    declare -a v1=(${1//./ })
    declare -a v2=(${2//./ })
    local i=""

    # Fill empty positions in v1 with zeros
    for (( i=${#v1[@]}; i<${#v2[@]}; i++ )); do
        v1[i]=0
    done

    for (( i=0; i<${#v1[@]}; i++ )); do

        # Fill empty positions in v2 with zeros
        if [[ -z ${v2[i]} ]]; then
            v2[i]=0
        fi

        if (( 10#${v1[i]} > 10#${v2[i]} )); then
            printf ">"
        fi

        if (( 10#${v1[i]} < 10#${v2[i]} )); then
            printf "<"
        fi

    done

    printf "="
}

download() {

    local url="$1"
    local output="$2"

    if [ -x "$(command -v curl)" ]; then

        curl -LsSo "$output" "$url" &> /dev/null
        #     │││└─ write output to file
        #     ││└─ show error messages
        #     │└─ don't show the progress meter
        #     └─ follow redirects

    elif [ -x "$(command -v wget)" ]; then

        wget -qO "$output" "$url" &> /dev/null
        #     │└─ write output to file
        #     └─ don't show output

    else
        return 1
    fi

    return $?

}

download_dotfiles() {

    local tmpFile="$(mktemp -u XXXXX)"

    cd "/tmp"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    download "$DOTFILES_TARBALL_URL" "$tmpFile"
    print_result $? "Download archive" "true"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    printf "\n"

    ask_for_confirmation "Do you want to store the dotfiles in '$dotfilesDirectory'?"
    if ! answer_is_yes; then
        dotfilesDirectory=""
        while [ -z "$dotfilesDirectory" ]; do
            ask "Please specify another location for the dotfiles (path): "
            dotfilesDirectory="$(get_answer)"
        done
    fi

    # Ensure the `dotfiles` directory is available

    while [ -e "$dotfilesDirectory" ]; do
        ask_for_confirmation "'$dotfilesDirectory' already exists, do you want to overwrite it?"
        if answer_is_yes; then
            rm -rf "$dotfilesDirectory"
            break
        else
            dotfilesDirectory=""
            while [ -z "$dotfilesDirectory" ]; do
                ask "Please specify another location for the dotfiles (path): "
                dotfilesDirectory="$(get_answer)"
            done
        fi
    done

    mkdir -p "$dotfilesDirectory"
    print_result $? "Create '$dotfilesDirectory'" "true"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Extract archive in the `dotfiles` directory

    extract "$tmpFile" "$dotfilesDirectory"
    print_result $? "Extract archive" "true"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove archive

    rm -rf "$tmpFile"
    print_result $? "Remove archive"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    cd "$dotfilesDirectory"

}

download_utils() {
    local tmpFile="$(mktemp -u XXXXX)"
    download "$DOTFILES_UTILS_URL" "/tmp/$tmpFile" \
        && source "/tmp/$tmpFile" \
        || exit
}

extract() {

    local archive="$1"
    local outputDir="$2"

    if [ -x "$(command -v tar)" ]; then
        tar -zxf "$archive" --strip-components 1 -C "$outputDir"
    else
        return 1
    fi

    return $?

}

# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

main() {

    # Ensure the OS is OS X or Ubuntu
    check_os || exit;

    # Ensure that the following actions are made
    # relative to the dotfiles directory root
    # http://mywiki.wooledge.org/BashFAQ/028
    cd "$(dirname "${BASH_SOURCE}")";

    download_utils
    ask_for_sudo

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Setup the `dotfiles` if needed
    if [ $(cmd_exists "git") -ne 0 ] || \
       [ "$(git config --get remote.origin.url)" != "$DOTFILES_ORIGIN" ]; then

        print_info "Download and extract archive"
        download_dotfiles

    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info "Create directories"
    ask_for_confirmation "Do you want the additional directories to be created?"
    if answer_is_yes; then
        ./os/create_directories.sh
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info "Copy files"
    ./os/copy_files.sh

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info "Create symbolic links"
    ./os/create_symbolic_links.sh

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info "Install applications"
    ask_for_confirmation "Do you want to install the applications/command line tools?"
    if answer_is_yes; then
        ./os/install_applications.sh
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info "Install npm packages"
    ask_for_confirmation "Do you want to install the npm packages?"
    if answer_is_yes; then
        ./os/install_npm_packages.sh
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info "Set preferences"
    ask_for_confirmation "Do you want to set the custom preferences?"
    if answer_is_yes; then
        ./os/set_preferences.sh
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    if [ $(cmd_exists "git") -eq 0 ]; then

        print_info "Initialize Git repository"
        ./os/initialize_git_repository.sh "$DOTFILES_ORIGIN"

        print_info "Update content"
        ask_for_confirmation "Do you want to update the content from the 'dotfiles' directory?"
        if answer_is_yes; then
            ./os/update_content.sh
        fi

    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    if [ $(cmd_exists "vim") -eq 0 ]; then

        print_info "Install Vim plugins"

        ask_for_confirmation "Do you want to install the Vim plugins?"
        if answer_is_yes; then
            ./os/install_vim_plugins.sh
        fi

    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info "Restart"

    ask_for_confirmation "Do you want to restart?"
    if answer_is_yes; then
        ./os/restart_computer.sh
    fi

}

main
